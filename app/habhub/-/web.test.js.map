{"version":3,"sources":["../../../test/test.ts","../../../test/test.web.ts","../../../assert/assert.test.ts","../../../assert/assert.ts","../../../object/object.test.ts","../../../set/set.test.ts","../../../dict/dict.test.ts","../../../atom/atom.test.ts","../../../mem/mem.test.ts","../../../state/local/local.test.ts","../../../viewer/viewer.test.ts","../../../clicker/clicker.test.ts","../../../syntax/syntax.test.ts","../../../syntax/md/md.test.ts","../habhub.test.ts"],"names":[],"mappings":"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","file":"web.test.js","sourcesContent":["namespace $ {\n\t\n\texport function $mol_test( set : { [ name : string ] : string | ( ()=> void ) } ) {\n\t\tfor( let name in set ) $mol_test_all.push( new $mol_test_case( set[ name ] ) )\n\t}\n\t\n\texport var $mol_test_all : $mol_test_case[] = []\n\t\n\texport var $mol_test_run = () => {\n\t\tfor( var test of $mol_test_all ) {\n\t\t\ttest.run()\n\t\t}\n\t}\n\t\n\texport class $mol_test_case {\n\t\t\n\t\tcode : ()=> void\n\t\t\n\t\tconstructor( code : string | ( ()=> void ) ) {\n\t\t\tif( typeof code === 'string' ) {\n\t\t\t\tthis.code = <any> new Function( code )\n\t\t\t} else {\n\t\t\t\tthis.code = code\n\t\t\t}\n\t\t}\n\t\t\n\t\trun() {\n\t\t\tthis.code()\n\t\t}\n\t\t\n\t}\n\t\n}\n","/// Autostart tests after all scripts load\nwindow.addEventListener( 'load' , event => {\n\t$.$mol_test_run()\n} )\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'must be unique'() {\n\t\t\t$mol_assert_unique( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t\n\texport function $mol_assert_ok( value : any ) {\n\t\tif( value ) return\n\t\tthrow new Error( `Not true (${value})` )\n\t}\n\t\n\texport function $mol_assert_not( value : any ) {\n\t\tif( !value ) return\n\t\tthrow new Error( `Not false (${value})` )\n\t}\n\t\n\texport function $mol_assert_fail( handler : ()=> any , ErrorRight? : any ) {\n\t\ttry {\n\t\t\thandler()\n\t\t} catch( error ) {\n\t\t\tif( ErrorRight ) $mol_assert_ok( error instanceof ErrorRight )\n\t\t\treturn error\n\t\t}\n\t\tthrow new Error( 'Not failed' )\n\t}\n\t\n\texport function $mol_assert_equal< Value >( a : Value , b : Value ) {\n\t\tif( a === b ) return\n\t\tthrow new Error( `Not equal (${a},${b})` )\n\t}\n\t\n\texport function $mol_assert_unique< Value >( a : Value , b : Value ) {\n\t\tif( a !== b ) return\n\t\tthrow new Error( `Not unique (${a},${b})` )\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new X().setup(\n\t\t\t\tobj => {\n\t\t\t\t\tobj.foo = () => 2\n\t\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\n\t\t'objectPath generation'() {\n\t\t\tvar x = new $mol_object\n\t\t\t\n\t\t\t$mol_assert_equal( x.objectPath() , '' )\n\t\t\t\n\t\t\tx.objectField( 'foo()' )\n\t\t\t$mol_assert_equal( x.objectPath() , '.foo()' )\n\t\t\t\n\t\t\tx.objectField( 'bar()' )\n\t\t\t$mol_assert_equal( x.objectPath() , '.foo()' )\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'set-shim must have equal api to native Set'() {\n\t\t\t\n\t\t\tvar set = new $mol_set_shim\n\t\t\t\n\t\t\tvar obj1 = {}\n\t\t\tvar obj2 = {}\n\t\t\tvar obj3 = {}\n\t\t\t\n\t\t\tset.add( obj1 )\n\t\t\tset.add( obj2 )\n\t\t\t\n\t\t\t$mol_assert_equal( set.size , 2 )\n\t\t\t$mol_assert_ok( set.has( obj1 ) )\n\t\t\t$mol_assert_ok( set.has( obj2 ) )\n\t\t\t$mol_assert_not( set.has( obj3 ) )\n\t\t\t\n\t\t\tvar entries = set.entries()\n\t\t\t$mol_assert_equal( entries.length , 2 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 0 ] , obj1 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 1 ] , obj1 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 0 ] , obj2 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 1 ] , obj2 )\n\t\t\t\n\t\t\tset.delete( obj2 )\n\t\t\t$mol_assert_not( set.has( obj2 ) )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'dict shim must have equal api to native Map'() {\n\t\t\tvar dict = new $mol_dict_shim\n\t\t\t\n\t\t\tvar obj1 = {}\n\t\t\tvar obj2 = {}\n\t\t\tvar obj3 = {}\n\t\t\t\n\t\t\tdict.set( obj1 , 1 )\n\t\t\tdict.set( obj2 , 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.size , 2 )\n\t\t\t$mol_assert_ok( dict.has( obj1 ) )\n\t\t\t$mol_assert_ok( dict.has( obj2 ) )\n\t\t\t$mol_assert_not( dict.has( obj3 ) )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.get( obj1 ) , 1 )\n\t\t\t$mol_assert_equal( dict.get( obj2 ) , 2 )\n\t\t\t$mol_assert_equal( dict.get( obj3 ) , void 0 )\n\t\t\t\n\t\t\tvar entries = dict.entries()\n\t\t\t$mol_assert_equal( entries.length , 2 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 0 ] , obj1 )\n\t\t\t$mol_assert_equal( entries[ 0 ][ 1 ] , 1 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 0 ] , obj2 )\n\t\t\t$mol_assert_equal( entries[ 1 ][ 1 ] , 2 )\n\t\t\t\n\t\t\tdict.delete( obj2 )\n\t\t\t$mol_assert_not( dict.has( obj2 ) )\n\t\t}\n\t\t\n\t} )\n}\n","module $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'caching'() {\n\t\t\t\n\t\t\tlet random = new $mol_atom( 'random' , ()=> Math.random() )\n\t\t\t\n\t\t\t$mol_assert_equal( random.get() , random.get() )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'lazyness'() {\n\t\t\t\n\t\t\tlet value = 0\n\t\t\tlet prop = new $mol_atom( 'prop' , ()=> value = 1 )\n\t\t\t\n\t\t\t$mol_defer.run()\n\t\t\t\n\t\t\t$mol_assert_equal( value , 0 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'instant actualization'() {\n\t\t\t\n\t\t\tlet source = new $mol_atom( 'source' , ( next? : number )=> next || 1 )\n\t\t\tlet middle = new $mol_atom( 'middle' , ()=> source.get() + 1 )\n\t\t\tlet target = new $mol_atom( 'target' , ()=> middle.get() + 1 )\n\t\t\t\n\t\t\t$mol_assert_equal( target.get() , 3 )\n\t\t\t\n\t\t\tsource.set( 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( target.get() , 4 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'automatic deferred restart'() {\n\t\t\t\n\t\t\tlet targetValue : number\n\t\t\t\n\t\t\tlet source = new $mol_atom( 'source' , ( next? : number )=> next || 1 )\n\t\t\tlet middle = new $mol_atom( 'middle' , ()=> source.get() + 1 )\n\t\t\tlet target = new $mol_atom( 'target' , ()=> targetValue = middle.get() + 1 )\n\t\t\t\n\t\t\ttarget.get()\n\t\t\t$mol_assert_equal( targetValue , 3 )\n\t\t\t\n\t\t\tsource.set( 2 )\n\t\t\t$mol_assert_equal( targetValue , 3 )\n\t\t\t\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_equal( targetValue , 4 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t//'error handling'() {\n\t\t//\t\n\t\t//\tlet source = new $mol_atom< number >( ( next? : number )=> {\n\t\t//\t\tthrow new Error( 'Test error' )\n\t\t//\t} )\n\t\t//\tlet middle = new $mol_atom( ()=> source.get() + 1 )\n\t\t//\tlet target = new $mol_atom( ()=> middle.get() + 1 )\n\t\t//\t\n\t\t//\t$mol_assert_fail( ()=> target.get().valueOf() )\n\t\t//\t\n\t\t//} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\n\t\t'cached property with simple key'() {\t\t\t\t\n\n\t\t\tclass X extends $mol_object {\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\tfoo( id : number , next? : Number|String ) {\n\t\t\t\t\tif( next == null ) return new Number( 123 )\n\t\t\t\t\treturn new Number( next )\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst x = new X\n\n\t\t\t// get\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 123 )\n\t\t\t$mol_assert_equal( x.foo( 0 ) , x.foo( 0 ) )\n\t\t\t$mol_assert_unique( x.foo( 0 ) , x.foo( 1 ) )\n\n\t\t\t// set\n\t\t\tx.foo( 0 , 321 )\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 321 )\n\n\t\t\t// reset\n\t\t\tx.foo( 0 , null )\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo( 0 ).valueOf() , 123 )\n\n\t\t} ,\n\n\t\t'cached property with complex key'() {\n\n\t\t\tclass X extends $mol_object {\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\tfoo( ids : number[] ) {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst x = new X\n\n\t\t\t$mol_assert_equal( x.foo( [ 0 , 1 ] ) , x.foo( [ 0 , 1 ] ) )\n\t\t\t$mol_assert_unique( x.foo( [ 0 , 1 ] ) , x.foo( [ 0 , 2 ] ) )\n\t\t} ,\n\n\t\t'auto sync of properties'() {\n\n\t\t\tclass X extends $mol_object {\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tfoo( next? : number ) {\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tbar() {\n\t\t\t\t\treturn this.foo() + 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\txxx() {\n\t\t\t\t\treturn this.bar() + 1\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst x = new X\n\t\t\t$mol_assert_equal( x.bar() , 2 )\n\t\t\t$mol_assert_equal( x.xxx() , 3 )\n\n\t\t\tx.foo( 5 )\n\t\t\t$mol_assert_equal( x.xxx() , 7 )\n\t\t} ,\n\n\t\t//'must fail on recursive dependency'() {\n\t\t//\n\t\t//\tclass X extends $mol_object {\n\t\t//\n\t\t//\t\t@ $mol_prop()\n\t\t//\t\tfoo() : number {\n\t\t//\t\t\treturn this.foo() + 1\n\t\t//\t\t}\n\t\t//\n\t\t//\t}\n\t\t//\n\t\t//\tvar x = new X\n\t\t//\n\t\t//\ttry {\n\t\t//\t\tx.foo().valueOf()\n\t\t//\t\t$mol_assert_fail( 'Not tracked recursive dependency' )\n\t\t//\t} catch( error ) {\n\t\t//\t\t$mol_assert_equal( error.message , 'Recursive dependency! .foo()' )\n\t\t//\t}\n\t\t//} ,\n\n\t\t'must be deferred destroyed when no longer referenced'() {\n\n\t\t\tlet foo : any\n\n\t\t\tclass B extends $mol_object {\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tshowing( next? : boolean ) {\n\t\t\t\t\tif( next === void 0 ) return true\n\t\t\t\t\treturn next\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tfoo() {\n\t\t\t\t\treturn foo = new $mol_object\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tbar() {\n\t\t\t\t\treturn this.showing() ? this.foo() : null\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar b = new B\n\n\t\t\tvar bar = b.bar()\n\t\t\t$mol_assert_ok( bar )\n\n\t\t\tb.showing( false )\n\t\t\tb.bar()\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_ok( foo.destroyed() )\n\t\t\t$mol_assert_ok( bar.destroyed() )\n\t\t\t$mol_assert_not( b.bar() )\n\n\t\t\tb.showing( true )\n\t\t\t$mol_defer.run()\n\t\t\t$mol_assert_unique( b.bar() , bar )\n\t\t} ,\n\n\t\t'wait for data'() {\n\n\t\t\tclass Test extends $mol_object {\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tsource( next? : string , force? : $mol_atom_force ) : string {\n\t\t\t\t\tnew $mol_defer( () => {\n\t\t\t\t\t\tthis.source( 'Jin' , $mol_atom_force )\n\t\t\t\t\t} )\n\t\t\t\t\tthrow new $mol_atom_wait( 'Wait for data!' )\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\tmiddle() {\n\t\t\t\t\treturn this.source()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_mem()\n\t\t\t\ttarget() {\n\t\t\t\t\treturn this.middle()\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst t = new Test\n\n\t\t\t$mol_assert_fail( ()=> t.target().valueOf() , $mol_atom_wait )\n\n\t\t\t$mol_defer.run()\n\n\t\t\t$mol_assert_equal( t.target() , 'Jin' )\n\t\t} ,\n\n\t} )\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'local get set delete'() {\n\t\t\t\t\t\n\t\t\tvar key = '$mol_state_local_test:' + Math.random()\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t\t\n\t\t\t$mol_state_local.value( key , 123 )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , 123 )\n\t\t\t\n\t\t\t$mol_state_local.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'id auto generation'() {\n\t\t\t\t\n\t\t\tclass $mol_viewer_test_item extends $mol_viewer { }\n\t\t\t\n\t\t\tclass $mol_viewer_test_block extends $mol_viewer {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\telement( id : number ) {\n\t\t\t\t\treturn new $mol_viewer_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test_block()\n\t\t\t\n\t\t\t$mol_assert_equal( x.DOMNode().id , '' )\n\t\t\t$mol_assert_equal( x.element( 0 ).DOMNode().id , '.element(0)' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'caching ref to dom node'() {\n\t\t\t\t\n\t\t\tclass $mol_viewer_test extends $mol_viewer { }\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test()\n\t\t\t\n\t\t\t$mol_assert_equal( x.DOMNode() , x.DOMNode() )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'content render'() {\n\t\t\t\t\n\t\t\tclass $mol_viewer_test extends $mol_viewer {\n\t\t\t\tchilds() {\n\t\t\t\t\treturn [ 'lol' , 5 ]\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test()\n\t\t\t\n\t\t\tvar node = x.DOMTree()\n\t\t\t\n\t\t\t$mol_assert_equal( node.innerHTML , 'lol5' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'bem attributes generation'() {\n\t\t\t\t\n\t\t\tclass $mol_viewer_test_item extends $mol_viewer { }\n\t\t\t\n\t\t\tclass $mol_viewer_test_block extends $mol_viewer {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key()\n\t\t\t\telement( id : number ) {\n\t\t\t\t\treturn new $mol_viewer_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test_block()\n\t\t\t\n\t\t\t$mol_assert_equal( x.DOMNode().getAttribute( 'mol_viewer_test_block' ) , '' )\n\t\t\t$mol_assert_equal( x.DOMNode().getAttribute( 'mol_viewer' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.element( 0 ).DOMNode().getAttribute( 'mol_viewer_test_block_element' ) , '' )\n\t\t\t$mol_assert_equal( x.element( 0 ).DOMNode().getAttribute( 'mol_viewer_element' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.element( 0 ).DOMNode().getAttribute( 'mol_viewer_test_item' ) , '' )\n\t\t\t$mol_assert_equal( x.element( 0 ).DOMNode().getAttribute( 'mol_viewer' ) , '' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom attributes'() {\n\t\t\t\n\t\t\tclass $mol_viewer_test extends $mol_viewer {\n\t\t\t\tattr() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'href' : ()=> <any> '#haha' ,\n\t\t\t\t\t\t'required' : ()=> <any> true ,\n\t\t\t\t\t\t'hidden' : ()=> <any> null ,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test()\n\t\t\t\n\t\t\tvar node = x.DOMTree()\n\t\t\t\n\t\t\t$mol_assert_equal( node.getAttribute( 'href' ) , '#haha' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'hidden' ) , null )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom fields'() {\n\t\t\t\t\n\t\t\tclass $mol_viewer_test extends $mol_viewer {\n\t\t\t\tfield() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'style.top' : ()=> '10px'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test()\n\t\t\t\n\t\t\tvar node = x.DOMTree() as HTMLElement\n\t\t\t\n\t\t\t$mol_assert_equal( node.style.top , '10px' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'attach event handlers'() {\n\t\t\t\t\n\t\t\tvar clicked = false\n\t\t\t\n\t\t\tclass $mol_viewer_test extends $mol_viewer {\n\t\t\t\tevent() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'click' : ( next? : Event ) => this.eventClick( next )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teventClick( next? : Event ) {\n\t\t\t\t\tclicked = true\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_viewer_test()\n\t\t\t\n\t\t\tvar node = x.DOMNode() as HTMLElement\n\t\t\tnode.click()\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t\t\n\t\t} ,\n\t\n\t} )\n}\n","namespace $.$mol {\n\t\n\t$mol_test({\n\t\t\n\t\t'handle clicks by default'() {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = new $mol_clicker\n\t\t\tclicker.eventClick = event => { clicked = true }\n\t\t\t\n\t\t\tconst element = <HTMLButtonElement> clicker.DOMTree()\n\t\t\telement.dispatchEvent( new Event( 'click' , {} ) )\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t} ,\n\t\t\n\t\t'no handle clicks if disabled'() {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = new $mol_clicker\n\t\t\tclicker.eventClick = event => { clicked = true }\n\t\t\tclicker.enabled = ()=> false\n\t\t\t\n\t\t\tconst element = <HTMLButtonElement> clicker.DOMTree()\n\t\t\telement.dispatchEvent( new Event( 'click' , {} ) )\n\t\t\t\n\t\t\t$mol_assert_not( clicked )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'search numbers'() {\n\t\t\t\n\t\t\tconst syntax = new $mol_syntax({\n\t\t\t\t'number' : /[+-]?\\d+(?:\\.\\d+)?/\n\t\t\t})\n\t\t\t\n\t\t\tconst serial = ( tokens : $mol_syntax_token[] )=> {\n\t\t\t\treturn tokens.map( token => `${token.name}=${token.found}` ).join( '|' )\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tserial( syntax.tokenize( '' ) ) ,\n\t\t\t\t''\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tserial( syntax.tokenize( 'foo' ) ) ,\n\t\t\t\t'=foo'\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tserial( syntax.tokenize( '123' ) ) ,\n\t\t\t\t'number=123'\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tserial( syntax.tokenize( 'foo123bar' ) ) ,\n\t\t\t\t'=foo|number=123|=bar'\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tserial( syntax.tokenize( 'foo123bar456' ) ) ,\n\t\t\t\t'=foo|number=123|=bar|number=456'\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tserial( syntax.tokenize( 'foo123\\n\\nbar456\\n' ) ) ,\n\t\t\t\t'=foo|number=123|=\\n\\nbar|number=456|=\\n'\n\t\t\t)\n\t\t\t\n\t\t}\n\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'only text'() {\n\t\t\t\n\t\t\tconst tokens = $mol_syntax_md_flow.tokenize( 'Hello,\\nWorld..\\r\\n\\r\\n\\nof Love!' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens.map( token => token.found ).join( '|' ) , 'Hello,\\nWorld..\\r\\n\\r\\n\\n|of Love!' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'headers and text'() {\n\t\t\t\n\t\t\tconst tokens = $mol_syntax_md_flow.tokenize( '# Header1\\n\\nHello!\\n\\n## Header2' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens.length , 3 )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[0].name , 'header' )\n\t\t\t$mol_assert_equal( tokens[0].chunks.join( '|' ) , '#| |Header1|\\n\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[1].name , 'block' )\n\t\t\t$mol_assert_equal( tokens[1].chunks.join( '|' ) , 'Hello!|\\n\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[2].name , 'header' )\n\t\t\t$mol_assert_equal( tokens[2].found , '## Header2' )\n\t\t\t$mol_assert_equal( tokens[2].chunks.join( '|' ) , '##| |Header2|' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'codes and text'() {\n\t\t\t\n\t\t\tconst tokens = $mol_syntax_md_flow.tokenize( '```\\nstart()\\n```\\n\\n```js\\nrestart()\\n```\\n\\nHello!\\n\\n```\\nstop()\\n```' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens.length , 4 )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[0].name , 'code' )\n\t\t\t$mol_assert_equal( tokens[0].chunks.join( '|' ) , '```||start()\\n|```|\\n\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[1].name , 'code' )\n\t\t\t$mol_assert_equal( tokens[1].chunks.join( '|' ) , '```|js|restart()\\n|```|\\n\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[2].name , 'block' )\n\t\t\t$mol_assert_equal( tokens[2].chunks.join( '|' ) , 'Hello!|\\n\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[3].name , 'code' )\n\t\t\t$mol_assert_equal( tokens[3].chunks.join( '|' ) , '```||stop()\\n|```|' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'table'() {\n\t\t\tconst tokens = $mol_syntax_md_flow.tokenize( '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens.length , 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[0].name , 'table' )\n\t\t\t$mol_assert_equal( tokens[0].chunks[0] , '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n' )\n\t\t\t\n\t\t\t$mol_assert_equal( tokens[1].name , 'table' )\n\t\t\t$mol_assert_equal( tokens[1].chunks[0] , '| Cell11 | Cell12\\n| Cell21 | Cell22\\n' )\n\t\t}\n\t\t\n\t})\n}\n","namespace $.$mol {\n\t\n\t$mol_test({\n\t\t'gist content is title + body'() {\n\t\t\t\n\t\t\tconst app = new $mol_app_habhub\n\t\t\t\n\t\t\tapp.gists = ()=> [\n\t\t\t\t{\n\t\t\t\t\tid : 1 ,\n\t\t\t\t\ttitle : 'hello' ,\n\t\t\t\t\tbody : 'world' ,\n\t\t\t\t}\n\t\t\t]\n\t\t\t\n\t\t\t$mol_assert_equal( app.gistContent( 0 ) , '# hello\\nworld' )\n\t\t\t\n\t\t}\n\t})\n\t\n}\n"]}